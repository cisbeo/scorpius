// ANTARES TENDER ASSISTANT - PHASE 1 SCHEMA EXTENSION
// Extension du schéma Prisma existant pour la spécialisation marchés publics français
// Générée le: 2025-01-18

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ==========================================
// MODÈLES EXISTANTS PRÉSERVÉS (NON MODIFIÉS)
// ==========================================

model User {
  id        String   @id
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  organizationUsers OrganizationUser[]

  @@map("users")
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // LlamaCloud Project integration (project-specific connection)
  llamaCloudProjectId    String?
  llamaCloudProjectName  String?
  llamaCloudOrgName      String?
  llamaCloudConnectedAt  DateTime?

  // Relationships
  projects          Project[]
  organizationUsers OrganizationUser[]
  knowledgeBases    KnowledgeBase[]

  @@map("organizations")
}

model OrganizationUser {
  id        String   @id @default(cuid())
  role      String   @default("member") // "owner", "admin", "member"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign keys
  userId         String
  organizationId String

  // Relationships
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@index([organizationId])
  @@map("organization_users")
}

model Project {
  id          String     @id @default(cuid())
  name        String
  description String?
  summary     String?    // RFP summary generated from uploaded documents
  eligibility String[]   // Vendor eligibility requirements as bullet points
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  questions   Question[]

  // Foreign key
  organizationId String

  // Relationships
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  projectIndexes ProjectIndex[]
  
  // NOUVEAU: Relations analyseur DCE français
  frenchTenders    FrenchTender[]
  tenderDocuments  TenderDocument[]
  tenderAnalyses   TenderAnalysis[]

  @@index([organizationId])
  @@map("projects")
}

model ProjectIndex {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // LlamaCloud index information (mapped from pipeline API)
  indexId   String // LlamaCloud pipeline ID (stored as indexId for clarity)
  indexName String // LlamaCloud pipeline name (stored as indexName for clarity)

  // Foreign key
  projectId String

  // Relationships
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, indexId])
  @@index([projectId])
  @@map("project_indexes")
}

model Question {
  id          String   @id @default(cuid())
  referenceId String?  // AI-generated ID like "question_1.10.1" for document structure reference
  text        String
  topic       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  answer      Answer?
  
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([projectId, referenceId]) // Composite index for efficient lookups
  @@map("questions")
}

model Answer {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sources   Source[]
  
  questionId String   @unique
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("answers")
}

model Source {
  id          String   @id @default(cuid())
  fileName    String
  filePath    String?
  pageNumber  String?
  documentId  String?
  relevance   Int?
  textContent String?  @db.Text
  createdAt   DateTime @default(now())
  
  answerId    String
  answer      Answer   @relation(fields: [answerId], references: [id], onDelete: Cascade)
  
  @@index([answerId])
  @@map("sources")
}

model KnowledgeBase {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Foreign key
  organizationId String

  // Relationships  
  organization Organization          @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  questions    KnowledgeBaseQuestion[]

  @@index([organizationId])
  @@map("knowledge_bases")
}

model KnowledgeBaseQuestion {
  id        String   @id @default(cuid())
  text      String
  topic     String?  // Optional categorization
  tags      String[] // Optional tags for better organization
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign key
  knowledgeBaseId String

  // Relationships
  knowledgeBase KnowledgeBase        @relation(fields: [knowledgeBaseId], references: [id], onDelete: Cascade)
  answer        KnowledgeBaseAnswer?

  @@index([knowledgeBaseId])
  @@map("knowledge_base_questions")
}

model KnowledgeBaseAnswer {
  id        String   @id @default(cuid())
  text      String   @db.Text // Using Text for longer answers
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign key
  questionId String @unique

  // Relationships
  question KnowledgeBaseQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("knowledge_base_answers")
}

// ==========================================
// NOUVEAUX MODÈLES PHASE 1 - MARCHÉS PUBLICS
// ==========================================

// Modèle principal pour les appels d'offres publics français
model FrenchTender {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // === IDENTIFICATION OFFICIELLE AO ===
  tenderNumber         String    // N° SIRET/PLACE/AWS-Achat
  publicationDate      DateTime  // Date publication AO
  submissionDeadline   DateTime  // Date limite remise offres
  estimatedValue       Decimal?  // Valeur estimée du marché
  
  // === ENTITÉ CONTRACTANTE ===
  contractingAuthority String           // Nom organisme
  authorityType        AuthorityType    // Type: COLLECTIVITE, ETAT, etc.
  authoritySize        AuthoritySize    // Taille: SMALL, MEDIUM, LARGE
  
  // === CLASSIFICATION APPEL D'OFFRES ===
  tenderType          TenderType       // APPEL_OFFRE, MARCHE_NEGOCIE, etc.
  sector              TenderSector     // IT_INFRASTRUCTURE, DEVELOPMENT, etc.
  
  // === DOCUMENTS DCE ANALYSÉS ===
  dceFiles            Json             // Liste fichiers uploadés avec métadonnées
  dceStructure        Json             // Structure analysée du DCE complet
  technicalRequirements Json           // CCTP extrait et structuré
  administrativeRequirements Json      // CCP/RC analysé
  evaluationCriteria  Json             // Critères de jugement détaillés
  
  // === ANALYSE AUTOMATIQUE ===
  complexityScore         Int          // Score 1-10 calculé automatiquement
  estimatedPreparationDays Int         // Estimation IA durée préparation
  mandatoryRequirements   String[]     // Exigences obligatoires extraites
  
  // === INTELLIGENCE BUSINESS (Phase 2) ===
  winProbability      Float?           // Probabilité succès calculée par ML
  competitorAnalysis  Json?            // Analyse concurrentielle prédite
  pricingInsights     Json?            // Recommandations de prix
  
  // === RELATIONS ===
  project           Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId         String
  responses         TenderResponse[]   // Réponses Antares à cet AO
  
  // === INDEX PERFORMANCE ===
  @@index([tenderNumber])               // Recherche par numéro
  @@index([submissionDeadline])         // Tri par échéance
  @@index([authorityType, sector])      // Filtrage type + secteur
  @@index([complexityScore])            // Tri par complexité
  @@map("french_tenders")
}

// Catalogue des services Antares par secteur d'expertise
model AntaresService {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // === CLASSIFICATION SERVICE ===
  serviceType     ServiceType        // INFRASTRUCTURE, DEVELOPMENT, CYBERSECURITY
  category        String             // Sous-catégorie (ex: "Virtualisation", "Web Dev")
  name            String             // Nom commercial du service
  description     String @db.Text    // Description détaillée et commerciale
  
  // === SPÉCIFICATIONS TECHNIQUES ===
  technologies    String[]           // Technologies utilisées/maîtrisées
  methodologies   String[]           // Méthodologies (Agile, ITIL, DevOps, etc.)
  certifications  String[]           // Certifications requises/apportées
  
  // === PRICING ET RESSOURCES ===
  unitType        UnitType           // JOUR_HOMME, PROJET, FORFAIT
  basePrice       Decimal            // Prix de base en euros
  competencyLevel Int                // Niveau expertise requis 1-5
  teamSize        Int                // Taille équipe type pour ce service
  duration        Int?               // Durée moyenne en jours (si applicable)
  
  // === FACTEURS DE PRICING ===
  complexityFactor    Float @default(1.0)  // Multiplicateur si complexité élevée
  urgencyFactor      Float @default(1.0)   // Multiplicateur si urgence
  riskFactor         Float @default(1.0)   // Multiplicateur si risque élevé
  
  // === MÉTADONNÉES ===
  isActive        Boolean @default(true)   // Service actif dans catalogue
  displayOrder    Int     @default(0)      // Ordre affichage interface
  
  // === RELATIONS ===
  references      ServiceReference[]       // Références projets liées
  tenderResponses TenderServiceMapping[]   // Utilisations dans réponses AO
  
  // === INDEX PERFORMANCE ===
  @@index([serviceType, isActive])         // Filtrage par secteur actif
  @@index([category])                      // Groupement par catégorie
  @@map("antares_services")
}

// Références de projets réalisés par Antares (anonymisables)
model ServiceReference {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // === CLIENT (avec anonymisation possible) ===
  clientName          String             // Nom réel client (base)
  clientDisplayName   String?            // Nom affiché (anonymisé si besoin)
  clientSector        ClientSector       // BANQUE, TRANSPORT, COLLECTIVITE...
  clientSize          ClientSize         // PME, ETI, GRAND_COMPTE
  isConfidential      Boolean @default(false) // Si anonymisation requise
  
  // === PROJET RÉALISÉ ===
  projectName         String             // Nom du projet
  projectDescription  String @db.Text    // Description détaillée réalisation
  projectValue        Decimal?           // Valeur contrat (si communiquable)
  startDate          DateTime           // Date début projet
  endDate            DateTime?          // Date fin projet (si terminé)
  duration           Int                // Durée réelle en mois
  teamSize           Int                // Taille équipe mobilisée
  
  // === RÉSULTATS ET MÉTRIQUES ===
  successMetrics      Json               // KPIs, économies réalisées, performances
  clientSatisfaction  Int?               // Note satisfaction client 1-5
  clientTestimonial   String? @db.Text   // Témoignage client (si autorisé)
  
  // === CONTEXTE TECHNIQUE ===
  challengesFaced     String[]           // Défis techniques relevés
  solutionsProvided   String[]           // Solutions techniques apportées
  technologiesUsed    String[]           // Stack technique utilisée
  
  // === RELATIONS ===
  service         AntaresService @relation(fields: [serviceId], references: [id])
  serviceId       String
  
  // === INDEX PERFORMANCE ===
  @@index([clientSector, isConfidential]) // Filtrage secteur + confidentialité
  @@index([serviceId])                    // Références par service
  @@map("service_references")
}

// Historique des appels d'offres traités par Antares (gagnés/perdus)
model HistoricalTender {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  // === IDENTIFICATION AO HISTORIQUE ===
  tenderNumber        String             // Numéro AO original
  year               Int                // Année de l'AO
  submissionDate     DateTime           // Date soumission Antares
  
  // === CONTEXTE MARCHÉ ===
  contractingAuthority String            // Organisme contractant
  authorityType       AuthorityType     // Type autorité
  estimatedValue      Decimal           // Valeur estimée à l'époque
  actualValue         Decimal?          // Valeur réelle marché (si connue)
  
  // === CLASSIFICATION ===
  sector              TenderSector      // Secteur IT concerné
  tenderType          TenderType        // Type procédure
  complexity          Int               // Complexité 1-10 (évaluée a posteriori)
  
  // === CONTEXTE CONCURRENTIEL ===
  competitorsCount    Int?              // Nombre concurrents estimé
  estimatedCompetitors String[]         // ["Capgemini", "Atos", "Sopra Steria"]
  winnerCompany       String?           // Entreprise qui a gagné
  winningPrice        Decimal?          // Prix gagnant (si connu)
  
  // === RÉSULTAT ANTARES ===
  antaresResult       TenderResult      // WON, LOST, NOT_SUBMITTED
  antaresRank         Int?              // Position finale Antares
  antaresPrice        Decimal?          // Prix proposé par Antares
  antaresScore        Json?             // Scores techniques/prix détaillés
  
  // === DOCUMENTS HISTORIQUES ===
  originalDCE         String? @db.Text  // DCE complet (si conservé)
  antaresResponse     String? @db.Text  // Réponse Antares complète
  
  // === POST-MORTEM ET APPRENTISSAGES ===
  winFactors          String[]          // Facteurs identifiés de succès
  lossReasons         String[]          // Raisons identifiées d'échec
  lessonsLearned      String? @db.Text  // Leçons apprises détaillées
  competitorAnalysis  Json?             // Analyse concurrence a posteriori
  
  // === MÉTRIQUES BUSINESS ===
  preparationDays     Int?              // Temps réel de préparation
  preparationCost     Decimal?          // Coût interne de préparation
  
  // === INDEX ANALYTICS ===
  @@index([antaresResult, sector])      // Analyse win/loss par secteur
  @@index([year, authorityType])        // Évolution temporelle par type
  @@index([contractingAuthority])       // Historique par client
  @@map("historical_tenders")
}

// Réponses d'Antares aux appels d'offres
model TenderResponse {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // === LIEN AVEC APPEL D'OFFRES ===
  tender          FrenchTender @relation(fields: [tenderId], references: [id])
  tenderId        String
  
  // === STRATÉGIE DE RÉPONSE ===
  responseStrategy ResponseStrategy     // AGGRESSIVE, BALANCED, PREMIUM
  targetMargin     Decimal             // Marge cible en pourcentage
  
  // === PROPOSITION TECHNIQUE ===
  proposedServices TenderServiceMapping[] // Services Antares proposés
  totalPrice       Decimal             // Prix total proposition
  deliveryTime     Int                 // Délai de livraison en jours
  
  // === ÉVALUATION ET RÉSULTATS ===
  technicalScore   Int?                // Score technique obtenu
  priceScore      Int?                // Score prix obtenu
  finalScore      Int?                // Score final pondéré
  finalRank       Int?                // Classement final
  result          TenderResult?       // Résultat final (WON/LOST/etc.)
  
  // === MÉTADONNÉES ===
  submittedAt     DateTime?           // Date/heure soumission
  submittedBy     String?             // ID utilisateur qui a soumis
  
  // === INDEX ===
  @@index([tenderId])                 // Réponses par AO
  @@map("tender_responses")
}

// Mapping services Antares utilisés dans une réponse d'AO
model TenderServiceMapping {
  id        String   @id @default(cuid())
  
  // === RELATIONS ===
  response    TenderResponse @relation(fields: [responseId], references: [id])
  responseId  String
  service     AntaresService @relation(fields: [serviceId], references: [id])
  serviceId   String
  
  // === QUANTITÉS ET PRICING ===
  quantity        Decimal             // Quantité (JH, forfait, etc.)
  unitPrice       Decimal             // Prix unitaire appliqué
  totalPrice      Decimal             // Prix total de cette ligne
  
  // === JUSTIFICATION ===
  justification   String? @db.Text    // Pourquoi ce service pour ce besoin
  
  // === INDEX ===
  @@index([responseId])               // Services par réponse
  @@map("tender_service_mappings")
}

// ==========================================
// ENUMS - TYPES DE DONNÉES MÉTIER
// ==========================================

// Types d'autorités contractantes françaises
enum AuthorityType {
  COLLECTIVITE      // Communes, Départements, Régions
  ETAT             // Ministères, Services de l'État
  ETABLISSEMENT    // EPA, EPIC, Hôpitaux, Universités
  AUTRE            // Autres organismes publics
}

// Taille des autorités contractantes (pour segmentation)
enum AuthoritySize {
  SMALL    // < 10k habitants ou budget < 10M€
  MEDIUM   // 10k-100k habitants ou 10M€-100M€  
  LARGE    // > 100k habitants ou budget > 100M€
}

// Types de procédures de marchés publics français
enum TenderType {
  APPEL_OFFRE_OUVERT     // Procédure ouverte classique
  APPEL_OFFRE_RESTREINT  // Procédure restreinte avec présélection
  MARCHE_NEGOCIE         // Marché négocié (seuils/urgence)
  DIALOGUE_COMPETITIF    // Dialogue compétitif pour projets complexes
  PROCEDURE_ADAPTEE      // Procédure adaptée (MAPA)
}

// Secteurs IT pour classification des AO
enum TenderSector {
  IT_INFRASTRUCTURE     // Datacenters, réseau, serveurs
  IT_DEVELOPMENT       // Applications, sites web, logiciels
  IT_CYBERSECURITY     // Sécurité, audit, conformité
  IT_SUPPORT          // Infogérance, helpdesk, MCO
  IT_CONSULTING       // Conseil, AMOA, stratégie
  IT_MIXED            // Projets multi-secteurs
}

// Types de services Antares
enum ServiceType {
  INFRASTRUCTURE      // Services infrastructure IT
  DEVELOPMENT        // Services développement  
  CYBERSECURITY      // Services cybersécurité
  SUPPORT           // Services support/infogérance
  CONSULTING        // Services conseil
}

// Types d'unités de facturation
enum UnitType {
  JOUR_HOMME        // Facturation au jour/homme
  PROJET           // Forfait projet global
  FORFAIT          // Forfait service spécifique
  ABONNEMENT       // Facturation récurrente (mensuel/annuel)
}

// Secteurs clients pour segmentation
enum ClientSector {
  BANQUE_FINANCE
  TRANSPORT_LOGISTIQUE
  COLLECTIVITE_PUBLIQUE
  SANTE
  INDUSTRIE
  RETAIL
  ENERGIE
  ASSURANCE
  EDUCATION
  DEFENSE
}

// Tailles d'entreprises clientes
enum ClientSize {
  TPE      // < 10 employés
  PME      // 10-250 employés
  ETI      // 250-5000 employés  
  GE       // > 5000 employés (Grandes Entreprises)
}

// Résultats possibles d'appels d'offres
enum TenderResult {
  WON              // Marché gagné par Antares
  LOST             // Marché perdu
  NOT_SUBMITTED    // Antares n'a pas soumissionné
  CANCELLED        // Appel d'offres annulé
  PENDING          // Résultat en attente
}

// Stratégies de réponse commerciale
enum ResponseStrategy {
  AGGRESSIVE       // Prix bas pour maximiser chances (marge réduite)
  BALANCED         // Équilibre prix/marge optimal
  PREMIUM          // Prix élevé avec forte marge (clients fidèles)
  STRATEGIC        // Prix stratégique (accepter perte pour gain futur)
}

// ==========================================
// NOUVEAUX MODÈLES - ANALYSEUR DCE FRANÇAIS
// ==========================================

// Document DCE uploadé avec métadonnées et statut de traitement
model TenderDocument {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Métadonnées fichier
  fileName    String
  fileSize    Int
  fileType    DocumentFileType
  uploadedAt  DateTime @default(now())
  uploadedBy  String

  // Statut et classification
  status         DocumentStatus
  documentType   DocumentType
  classification Json           // Résultats classification IA

  // Timestamps traitement
  processingStartedAt   DateTime?
  processingCompletedAt DateTime?

  // Relations
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  
  sections  TenderSection[]
  analyses  TenderDocumentAnalysis[]

  // Index performance
  @@index([projectId, status])
  @@index([documentType])
  @@map("tender_documents")
}

// Résultats complets de l'analyse IA d'un ou plusieurs documents DCE
model TenderAnalysis {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Métadonnées analyse
  analysisName     String
  status           DocumentStatus @default(PENDING)
  complexityScore  Int    // 1-10
  overallConfidence Float // 0-1

  // Données extraites
  marketScope          Json      // Objet marché extrait
  technicalRequirements Json     // Exigences techniques structurées
  evaluationCriteria    Json     // Critères jugement
  timeConstraints       Json     // Contraintes temporelles
  mandatoryRequirements String[] // Exigences obligatoires

  // Métadonnées completion
  analysisCompletedAt      DateTime?
  estimatedPreparationDays Int?
  errorMessage             String? // Message d'erreur si analyse échoue

  // Relations
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  
  documents      TenderDocumentAnalysis[]
  recommendations AntaresRecommendation[]
  reports        AnalysisReport[]

  // Index performance
  @@index([projectId])
  @@index([complexityScore])
  @@map("tender_analyses")
}

// Table de liaison pour documents analysés dans une analyse
model TenderDocumentAnalysis {
  id String @id @default(cuid())

  document   TenderDocument @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId String
  
  analysis   TenderAnalysis @relation(fields: [analysisId], references: [id], onDelete: Cascade)
  analysisId String

  @@unique([documentId, analysisId])
  @@map("tender_document_analyses")
}

// Section extraite et analysée d'un document DCE
model TenderSection {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Classification section
  sectionType SectionType
  title       String
  content     String @db.Text
  
  // Données structurées extraites
  structuredData Json
  confidence     Float   // 0-1
  pageNumbers    Int[]
  extractedAt    DateTime @default(now())

  // Relations
  document   TenderDocument @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId String

  // Index performance
  @@index([documentId])
  @@index([sectionType])
  @@map("tender_sections")
}

// Recommandations stratégiques et services Antares pertinents
model AntaresRecommendation {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Classification recommandation
  recommendationType RecommendationType
  title              String
  description        String @db.Text
  relevanceScore     Float   // 0-1

  // Détails business
  antaresServices String[] // IDs services catalogue
  estimatedEffort Int?     // jours-homme
  estimatedValue  Decimal? // euros
  riskLevel       RiskLevel
  actionable      Boolean  @default(true)

  // Relations
  analysis   TenderAnalysis @relation(fields: [analysisId], references: [id], onDelete: Cascade)
  analysisId String

  // Index performance
  @@index([analysisId])
  @@index([recommendationType])
  @@map("antares_recommendations")
}

// Rapport d'analyse exportable en PDF
model AnalysisReport {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Métadonnées rapport
  reportTitle    String
  generatedAt    DateTime @default(now())
  generatedBy    String
  reportSections Json

  // Fichier généré
  pdfUrl    String?
  isPublic  Boolean   @default(false)
  expiresAt DateTime? // RGPD - expiration automatique

  // Relations
  analysis   TenderAnalysis @relation(fields: [analysisId], references: [id], onDelete: Cascade)
  analysisId String

  // Index performance
  @@index([analysisId])
  @@index([generatedBy])
  @@index([expiresAt])
  @@map("analysis_reports")
}

// ==========================================
// ENUMS ANALYSEUR DCE
// ==========================================

enum DocumentStatus {
  PENDING
  PROCESSING
  ANALYZED
  ERROR
}

enum DocumentFileType {
  PDF
  DOC
  DOCX
}

enum DocumentType {
  DCE_COMPLETE
  CCTP
  CCP
  BPU
  RC
  OTHER
}

enum SectionType {
  CCTP
  CCP
  BPU
  RC
  ANNEXE
  OTHER
}

enum RecommendationType {
  SERVICE_MATCH
  STRATEGY
  RISK
  OPPORTUNITY
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
}